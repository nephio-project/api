---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: networks.infra.nephio.org
spec:
  group: infra.nephio.org
  names:
    categories:
    - nephio
    - network
    kind: Network
    listKind: NetworkList
    plural: networks
    singular: network
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Network is the Schema for the Network API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NetworkSpec defines the desired state of Network
            properties:
              bridgeDomains:
                description: BridgeDomains define a set of logical ports that share
                  the same flooding or broadcast characteristics. Like a virtual LAN
                  (VLAN), a bridge domain spans one or more ports of multiple devices.
                items:
                  properties:
                    interfaces:
                      description: Interfaces defines the interfaces belonging to
                        the bridge domain
                      items:
                        properties:
                          attachmentType:
                            description: 'AttachmentType defines the interface attachement:
                              vlan or none'
                            enum:
                            - none
                            - vlan
                            type: string
                          bridgeDomainName:
                            description: BridgeDomainName defines the name of the
                              bridgeDomain belonging to the interface
                            type: string
                          interfaceName:
                            description: InterfaceName defines the name of the interface
                            type: string
                          kind:
                            default: interface
                            description: Kind defines the kind of interface. Attached
                              to a routing table both interface and bridgedomain interfaces
                              are allowed. In a BridgeDomain only regular interfaces
                              are allowed
                            enum:
                            - interface
                            - bridgedomain
                            type: string
                          nodeName:
                            description: NodeName defines the name of the node the
                              interface belongs to interface
                            type: string
                          selector:
                            description: Selector defines the selector criterias for
                              the interface selection
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - kind
                        type: object
                      type: array
                    name:
                      description: Name defines the name of the bridge domain
                      type: string
                  required:
                  - name
                  type: object
                type: array
              routingTables:
                description: RoutingTables defines a set of routes belonging to a
                  given routing instance Multiple routing tables are also called virtual
                  routing instances. Each virtual routing instance can hold overlapping
                  IP information A routing table supports both ipv4 and ipv6
                items:
                  properties:
                    interfaces:
                      description: Interfaces defines the interfaces belonging to
                        the routing table
                      items:
                        properties:
                          attachmentType:
                            description: 'AttachmentType defines the interface attachement:
                              vlan or none'
                            enum:
                            - none
                            - vlan
                            type: string
                          bridgeDomainName:
                            description: BridgeDomainName defines the name of the
                              bridgeDomain belonging to the interface
                            type: string
                          interfaceName:
                            description: InterfaceName defines the name of the interface
                            type: string
                          kind:
                            default: interface
                            description: Kind defines the kind of interface. Attached
                              to a routing table both interface and bridgedomain interfaces
                              are allowed. In a BridgeDomain only regular interfaces
                              are allowed
                            enum:
                            - interface
                            - bridgedomain
                            type: string
                          nodeName:
                            description: NodeName defines the name of the node the
                              interface belongs to interface
                            type: string
                          selector:
                            description: Selector defines the selector criterias for
                              the interface selection
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                        required:
                        - kind
                        type: object
                      type: array
                    name:
                      description: Name defines the name of the routing table
                      type: string
                    prefixes:
                      description: Prefixes defines the prefixes belonging to the
                        routing table
                      items:
                        properties:
                          labels:
                            additionalProperties:
                              type: string
                            description: Labels as user defined labels
                            type: object
                          prefix:
                            description: Prefix defines the ip cidr in prefix notation.
                            pattern: (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))|((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))
                            type: string
                        required:
                        - prefix
                        type: object
                      type: array
                  required:
                  - name
                  - prefixes
                  type: object
                type: array
              topology:
                description: Topology defines the topology to which this network applies
                type: string
            required:
            - topology
            type: object
          status:
            description: NetworkStatus defines the observed state of Network
            properties:
              conditions:
                description: Conditions of the resource.
                items:
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
